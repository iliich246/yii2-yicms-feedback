<?phpnamespace Iliich246\YicmsFeedback\InputFields;use Iliich246\YicmsCommon\Annotations\Annotator;use Iliich246\YicmsCommon\Annotations\AnnotateInterface;use Iliich246\YicmsCommon\Annotations\AnnotatorFileInterface;use Iliich246\YicmsCommon\Annotations\AnnotatorStringInterface;use Iliich246\YicmsCommon\Base\AbstractTemplate;use Iliich246\YicmsCommon\Validators\ValidatorBuilder;use Iliich246\YicmsCommon\Validators\ValidatorDb;use Iliich246\YicmsCommon\Validators\ValidatorReferenceInterface;/** * Class InputFieldTemplate * * @property string $input_field_template_reference * @property string $validator_reference * @property integer $input_field_order * @property bool $active * @property bool $editable * * @package Iliich246\YicmsFeedback\InputFields */class InputFieldTemplate extends AbstractTemplate implements    ValidatorReferenceInterface,    AnnotateInterface,    AnnotatorFileInterface,    AnnotatorStringInterface{    /**     * @inheritdoc     */    protected static $buffer = [];    /** @var bool state of annotation necessity */    private $needToAnnotate = true;    /** @var Annotator instance */    private $annotator = null;    /** @var AnnotatorFileInterface instance */    private static $parentFileAnnotator;    /**     * @inheritdoc     */    public function init()    {        $this->active   = true;        $this->editable = true;        parent::init();    }    /**     * @inheritdoc     */    public static function tableName()    {        return '{{%feedback_input_fields_templates}}';    }    /**     * @inheritdoc     */    public function rules()    {        return array_merge(parent::rules(), [            [['active', 'editable'], 'boolean'],        ]);    }    /**     * @inheritdoc     */    public function scenarios()    {        $prevScenarios = parent::scenarios();        $scenarios[self::SCENARIO_CREATE] = array_merge($prevScenarios[self::SCENARIO_CREATE],            ['active', 'editable']);        $scenarios[self::SCENARIO_UPDATE] = array_merge($prevScenarios[self::SCENARIO_UPDATE],            ['active', 'editable']);        return $scenarios;    }    /**     * @inheritdoc     */    public function save($runValidation = true, $attributes = null)    {        if ($this->scenario === self::SCENARIO_CREATE) {            $this->input_field_order = $this->maxOrder();        }        return parent::save($runValidation, $attributes);    }    /**     * Returns true if this field template has constraints     * @return bool     */    public function isConstraints()    {        return true;        if (InputField::find()->where([            'feedback_input_fields_template_id' => $this->id        ])->one()) return true;        return false;    }    /**     * @inheritdoc     */    public function delete()    {        $inputFields = InputField::find()->where([            'feedback_input_fields_template_id' => $this->id        ])->all();        foreach($inputFields as $inputField)            $inputField->delete();        $inputFieldNames = InputFieldsNamesTranslatesDb::find()->where([            'feedback_input_fields_template_id' => $this->id,        ])->all();        foreach($inputFieldNames as $inputFieldName)            $inputFieldName->delete();        $validators = ValidatorDb::find()->where([            'validator_reference' => $this->validator_reference        ])->all();        foreach($validators as $validator)            $validator->delete();        return parent::delete();    }    /**     * @inheritdoc     */    public static function generateTemplateReference()    {        return parent::generateTemplateReference();    }    /**     * @inheritdoc     */    public function getOrderQuery()    {        return self::find()->where([            'input_field_template_reference' => $this->input_field_template_reference,        ]);    }    /**     * @inheritdoc     */    public static function getOrderFieldName()    {        return 'input_field_order';    }    /**     * @inheritdoc     */    public function getOrderValue()    {        return $this->input_field_order;    }    /**     * @inheritdoc     */    public function setOrderValue($value)    {        $this->input_field_order = $value;    }    /**     * @inheritdoc     */    public function configToChangeOfOrder()    {        $this->scenario = self::SCENARIO_CHANGE_ORDER;    }    /**     * @inheritdoc     */    public function getOrderAble()    {        return $this;    }    /**     * @inheritdoc     */    protected static function getTemplateReferenceName()    {        return 'input_field_template_reference';    }    /**     * @inheritdoc     * @throws \Iliich246\YicmsCommon\Base\CommonException     * @throws \yii\base\Exception     */    public function getValidatorReference()    {        if (!$this->validator_reference) {            $this->validator_reference = ValidatorBuilder::generateValidatorReference();            $this->scenario = self::SCENARIO_UPDATE;            $this->save(false);        }        return $this->validator_reference;    }    /**     * Sets parent file annotator     * @param AnnotatorFileInterface $fileAnnotator     */    public static function setParentFileAnnotator(AnnotatorFileInterface $fileAnnotator)    {        self::$parentFileAnnotator = $fileAnnotator;    }    /**     * @inheritdoc     * @throws \ReflectionException     */    public function annotate()    {        $this->getAnnotator()->finish();    }    /**     * @inheritdoc     */    public function offAnnotation()    {        $this->needToAnnotate = false;    }    /**     * @inheritdoc     */    public function onAnnotation()    {        $this->needToAnnotate = true;    }    /**     * @inheritdoc     */    public function isAnnotationActive()    {        return $this->needToAnnotate;    }    /**     * @inheritdoc     * @throws \ReflectionException     */    public function getAnnotator()    {        if (!is_null($this->annotator)) return $this->annotator;        $this->annotator = new Annotator();        $this->annotator->setAnnotatorFileObject($this);        $this->annotator->prepare();        return $this->annotator;    }    /**     * @inheritdoc     */    public function getAnnotationFilePath()    {        if (!is_dir(self::$parentFileAnnotator->getAnnotationFilePath() . '/' .            self::$parentFileAnnotator->getAnnotationFileName()))            mkdir(self::$parentFileAnnotator->getAnnotationFilePath() . '/' .                self::$parentFileAnnotator->getAnnotationFileName());        return self::$parentFileAnnotator->getAnnotationFilePath() . '/' .        self::$parentFileAnnotator->getAnnotationFileName() . '/InputFields';    }    /**     * @inheritdoc     */    public function getExtendsUseClass()    {        return 'Iliich246\YicmsFeedback\InputFields\InputField';    }    /**     * @inheritdoc     */    public function getExtendsClassName()    {        return 'InputField';    }    /**     * @inheritdoc     * @throws \ReflectionException     */    public static function getAnnotationTemplateFile()    {        $class = new \ReflectionClass(self::class);        return dirname($class->getFileName())  . '/annotations/input_field.php';    }    /**     * @inheritdoc     */    public static function getAnnotationFileNamespace()    {        return self::$parentFileAnnotator->getAnnotationFileNamespace() . '\\'        . self::$parentFileAnnotator->getAnnotationFileName() . '\\'        . 'InputFields';    }    /**     * @inheritdoc     */    public function getAnnotationFileName()    {        return ucfirst(mb_strtolower($this->program_name));    }    /**     * @inheritdoc     * @throws \ReflectionException     */    public static function getAnnotationsStringArray($searchData)    {        /** @var self[] $templates */        $templates = self::find()->where([            'input_field_template_reference' => $searchData        ])->orderBy([            'input_field_order' => SORT_ASC        ])->all();        if (!$templates) return [];        $result = [            ' *' . PHP_EOL,            ' * INPUT_FIELDS' . PHP_EOL,        ];        foreach ($templates as $template) {            $result[] = ' * @property ' . '\\' .                $template->getAnnotationFileNamespace() . '\\' .                $template->getAnnotationFileName() .                ' $input_' . $template->program_name . ' ' . PHP_EOL;            $result[] = ' * @property ' . '\\' .                $template->getAnnotationFileNamespace() . '\\' .                $template->getAnnotationFileName() .                ' $input_field_' . $template->program_name . ' ' . PHP_EOL;            $template->annotate();        }        return $result;    }}